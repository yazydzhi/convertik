import Foundation
import CoreData
import Combine

@MainActor
final class RatesRepository: ObservableObject {
    static let shared = RatesRepository()

    @Published private(set) var rates: [Rate] = []
    @Published private(set) var lastUpdated: Date?
    @Published private(set) var isLoading = false
    @Published private(set) var error: Error?

    private let coreDataStack = CoreDataStack.shared
    private let apiService = APIService.shared
    private var cancellables = Set<AnyCancellable>()

    private init() {
        loadLocalRates()
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if rates.isEmpty {
            addDefaultRates()
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        Task {
            await syncRemote()
        }
    }

    // MARK: - Public Methods

    func loadLocalRates() {
        print("üì± Loading local rates from CoreData...")
        let request: NSFetchRequest<RateEntity> = RateEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(keyPath: \RateEntity.code, ascending: true)]

        do {
            let entities = try coreDataStack.persistentContainer.viewContext.fetch(request)
            rates = entities.map(Rate.init)
            lastUpdated = rates.first?.updatedAt
            print("üì± Loaded \(rates.count) rates from CoreData")
        } catch {
            print("‚ùå Failed to load local rates: \(error)")
        }
    }

    func syncRemote() async {
        print("üîÑ Starting remote sync...")
        isLoading = true
        error = nil

        do {
            print("üì° Fetching rates from API...")
            let response = try await apiService.fetchRates()
            print("‚úÖ Received \(response.rates.count) rates from API")
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç —Å backend'–∞
            var currencyNames: [String: String] = [:]
            do {
                print("üì° Fetching currency names from API...")
                let namesResponse = try await apiService.fetchCurrencyNames()
                currencyNames = namesResponse.names
                print("‚úÖ Received \(currencyNames.count) currency names from API")
            } catch {
                print("‚ö†Ô∏è Failed to fetch currency names from API, using fallback: \(error)")
                // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π
                currencyNames = Rate.currencyNames
                print("üìã Using \(currencyNames.count) fallback currency names")
            }
            
            print("üíæ Updating local rates...")
            await updateLocalRates(from: response, names: currencyNames)
            print("‚úÖ Sync completed successfully")
            isLoading = false
        } catch {
            print("‚ùå Sync failed: \(error)")
            self.error = error
            isLoading = false
        }
    }

    func rate(for code: String) -> Rate? {
        rates.first { $0.code == code }
    }

    // MARK: - Default Rates

    private func addDefaultRates() {
        let context = coreDataStack.persistentContainer.newBackgroundContext()

        context.perform {
            let defaultRates = [
                ("RUB", "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", 1.0),
                ("USD", "–î–æ–ª–ª–∞—Ä –°–®–ê", 90.91),      // 1 USD = 90.91 ‚ÇΩ
                ("EUR", "–ï–≤—Ä–æ", 100.00),           // 1 EUR = 100.00 ‚ÇΩ
                ("GBP", "–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤", 114.94), // 1 GBP = 114.94 ‚ÇΩ
                ("CNY", "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", 12.50),   // 1 CNY = 12.50 ‚ÇΩ
                ("JPY", "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞", 0.58),     // 1 JPY = 0.58 ‚ÇΩ
                ("CHF", "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫", 102.04), // 1 CHF = 102.04 ‚ÇΩ
                ("CAD", "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä", 66.67),  // 1 CAD = 66.67 ‚ÇΩ
                ("AUD", "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä", 58.82), // 1 AUD = 58.82 ‚ÇΩ
                ("TRY", "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", 2.86)      // 1 TRY = 2.86 ‚ÇΩ
            ]

            for (code, name, value) in defaultRates {
                _ = self.createOrUpdateRate(
                    code: code,
                    name: name,
                    value: value,
                    updatedAt: Date(),
                    in: context
                )
            }

            do {
                try context.save()
                DispatchQueue.main.async {
                    self.loadLocalRates()
                }
            } catch {
                print("Failed to save default rates: \(error)")
            }
        }
    }

    // MARK: - Private Methods

    private func updateLocalRates(from response: RatesResponse, names: [String: String]) async {
        print("üíæ Starting to update local rates...")
        let context = coreDataStack.persistentContainer.newBackgroundContext()

        await context.perform {
            print("üìù Processing \(response.rates.count + 1) currencies...")
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É (RUB)
            _ = self.createOrUpdateRate(
                code: response.base,
                name: names[response.base] ?? response.base,
                value: 1.0,
                updatedAt: response.updatedAt,
                in: context
            )

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            for (code, value) in response.rates {
                _ = self.createOrUpdateRate(
                    code: code,
                    name: names[code] ?? code,
                    value: 1.0 / value, // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–±–ª–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã
                    updatedAt: response.updatedAt,
                    in: context
                )
            }

            do {
                try context.save()
                print("‚úÖ Successfully saved \(response.rates.count + 1) currencies to CoreData")

                // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                DispatchQueue.main.async {
                    self.loadLocalRates()
                    print("üîÑ Reloaded local rates, now have \(self.rates.count) currencies")
                }
            } catch {
                print("‚ùå Failed to save rates: \(error)")
            }
        }
    }

    private func createOrUpdateRate(
        code: String,
        name: String,
        value: Double,
        updatedAt: Date,
        in context: NSManagedObjectContext
    ) -> RateEntity {
        let request: NSFetchRequest<RateEntity> = RateEntity.fetchRequest()
        request.predicate = NSPredicate(format: "code == %@", code)

        let entity: RateEntity
        if let existing = try? context.fetch(request).first {
            entity = existing
        } else {
            entity = RateEntity(context: context)
            entity.code = code
        }

        entity.name = name
        entity.value = value
        entity.updatedAt = updatedAt

        return entity
    }
}
