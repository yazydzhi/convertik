import StoreKit
import Foundation
import Combine

@MainActor
final class StoreService: ObservableObject {
    static let shared = StoreService()

    @Published private(set) var monthlyProduct: Product?
    @Published private(set) var isPremium = false

    private let productIds = [
        "com.yazydzhi.Convertik"
    ]

    private let settingsService = SettingsService.shared
    private let analyticsService = AnalyticsService.shared
    private var cancellables = Set<AnyCancellable>()

    private init() {
        #if DEBUG
        print("üîß StoreService: Running in DEBUG mode with test configuration")
        #else
        print("üöÄ StoreService: Running in RELEASE mode with production configuration")
        #endif
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å SettingsService –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        $isPremium
            .receive(on: DispatchQueue.main)
            .sink { [weak self] isPremium in
                self?.settingsService.setPremiumStatus(isPremium)
            }
            .store(in: &cancellables)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        Task.detached { [weak self] in
            await self?.listenForTransactions()
        }
        
        Task.detached { [weak self] in
            await self?.updatePremiumStatus()
        }
    }

    // MARK: - Product Loading

    func loadProducts() async {
        do {
            let products = try await Product.products(for: productIds)
            monthlyProduct = products.first { $0.id == "com.yazydzhi.Convertik" }
        } catch {
            print("Failed to load products: \(error)")
        }
    }

    // MARK: - Purchase

    func purchase(_ product: Product) async throws -> Bool {
        let result = try await product.purchase()

        switch result {
        case .success(let verification):
            let transaction = try checkVerified(verification)
            await updatePremiumStatus()
            await transaction.finish()
            return true

        case .pending:
            return false

        case .userCancelled:
            return false

        @unknown default:
            return false
        }
    }

    // MARK: - Restore

    func restorePurchases() async throws {
        #if DEBUG
        print("üîß StoreService: Restoring purchases in DEBUG mode")
        // –í DEBUG —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try await AppStore.sync()
        #else
        print("üöÄ StoreService: Restoring purchases in RELEASE mode")
        // –í RELEASE —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        // AppStore.sync() –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try await AppStore.sync()
        #endif
        await updatePremiumStatus()
    }

    // MARK: - Ads Free Status

    func updatePremiumStatus() async {
        var hasPremium = false

        #if DEBUG
        print("üîß StoreService: Checking premium status in DEBUG mode")
        #else
        print("üöÄ StoreService: Checking premium status in RELEASE mode")
        #endif

        for await result in Transaction.currentEntitlements {
            do {
                let transaction = try checkVerified(result)

                if productIds.contains(transaction.productID) {
                    hasPremium = true
                    #if DEBUG
                    print("üîß StoreService: Found active subscription: \(transaction.productID)")
                    #else
                    print("üöÄ StoreService: Found active subscription: \(transaction.productID)")
                    #endif
                    break
                }
            } catch {
                print("Transaction verification failed: \(error)")
            }
        }

        isPremium = hasPremium
        settingsService.setPremiumStatus(hasPremium)
        
        #if DEBUG
        print("üîß StoreService: Premium status updated: \(hasPremium)")
        #else
        print("üöÄ StoreService: Premium status updated: \(hasPremium)")
        #endif
    }

    // MARK: - Transaction Listening

    private func listenForTransactions() async {
        for await result in Transaction.updates {
            do {
                let transaction = try checkVerified(result)
                await updatePremiumStatus()
                await transaction.finish()
            } catch {
                print("Transaction update failed: \(error)")
            }
        }
    }

    // MARK: - Verification

    private func checkVerified<T>(_ result: VerificationResult<T>) throws -> T {
        switch result {
        case .unverified:
            throw StoreError.failedVerification
        case .verified(let safe):
            return safe
        }
    }
}

enum StoreError: Error, LocalizedError {
    case failedVerification
    case networkError
    case unknownError

    var errorDescription: String? {
        switch self {
        case .failedVerification:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É"
        case .networkError:
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
        case .unknownError:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }
    }
}
