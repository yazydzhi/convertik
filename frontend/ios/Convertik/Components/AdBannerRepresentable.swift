import SwiftUI
import GoogleMobileAds

// MARK: - UIKit Wrapper –¥–ª—è BannerView
struct AdBannerRepresentable: UIViewRepresentable {
    @ObservedObject var adService: AdService
    
    func makeUIView(context: Context) -> BannerView {
        let bannerView = BannerView(adSize: AdSizeBanner)
        bannerView.adUnitID = adService.bannerAdUnitID
        bannerView.rootViewController = context.coordinator.getRootViewController()
        bannerView.delegate = context.coordinator
        
        print("üì± AdBannerRepresentable: Creating banner with Ad Unit ID: \(adService.bannerAdUnitID)")
        print("üì± AdBannerRepresentable: Root view controller: \(context.coordinator.getRootViewController() != nil ? "Found" : "Not found")")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–ª–∞–º—É
        let request = Request()
        
        print("üì± AdBannerRepresentable: Loading banner ad...")
        bannerView.load(request)
        
        return bannerView
    }
    
    func updateUIView(_ uiView: BannerView, context: Context) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, BannerViewDelegate {
        var parent: AdBannerRepresentable
        private var retryCount = 0
        private let maxRetries = 3 // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        
        init(_ parent: AdBannerRepresentable) {
            self.parent = parent
        }
        
        func getRootViewController() -> UIViewController? {
            guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                  let window = windowScene.windows.first else {
                return nil
            }
            return window.rootViewController
        }
        
        // MARK: - BannerViewDelegate
        
        func bannerViewDidReceiveAd(_ bannerView: BannerView) {
            DispatchQueue.main.async {
                print("‚úÖ Banner ad loaded successfully!")
                print("‚úÖ Ad Unit ID: \(bannerView.adUnitID ?? "Unknown")")
                self.parent.adService.isBannerLoaded = true
                self.parent.adService.bannerLoadAttempted = true
                self.parent.adService.trackAdImpression(adUnitId: bannerView.adUnitID ?? "")
            }
        }
        
        func bannerView(_ bannerView: BannerView, didFailToReceiveAdWithError error: Error) {
            DispatchQueue.main.async { [self] in
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                if let admobError = error as NSError? {
                    print("‚ùå AdMob Error Code: \(admobError.code)")
                    print("‚ùå AdMob Error Domain: \(admobError.domain)")
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "No ad to show" (–∫–æ–¥ 1) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –Ω–µ –æ—à–∏–±–∫–∞
                    if admobError.code == 1 && admobError.domain == "com.google.admob" {
                        print("‚ÑπÔ∏è No banner ad available at the moment (this is normal)")
                        print("‚ÑπÔ∏è Ad Unit ID: \(bannerView.adUnitID ?? "Unknown")")
                        self.parent.adService.bannerLoadAttempted = true
                        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isBannerLoaded = false –¥–ª—è "No ad to show"
                        return
                    }
                }
                
                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print("‚ùå Banner ad failed to load!")
                print("‚ùå Ad Unit ID: \(bannerView.adUnitID ?? "Unknown")")
                print("‚ùå Error: \(error.localizedDescription)")
                print("‚ùå Error details: \(error)")
                
                // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–Ω–µ "No ad to show") –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å retry
                if let admobError = error as NSError?,
                   !(admobError.code == 1 && admobError.domain == "com.google.admob") {
                    if retryCount < maxRetries {
                        retryCount += 1
                        print("üîÑ Retrying banner ad load in 5 seconds... (attempt \(retryCount)/\(maxRetries))")
                        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                            bannerView.load(Request())
                        }
                    } else {
                        print("‚ùå Max retry attempts reached, giving up on banner ad")
                    }
                }
                
                self.parent.adService.isBannerLoaded = false
                self.parent.adService.bannerLoadAttempted = true
            }
        }
        
        func bannerViewDidRecordClick(_ bannerView: BannerView) {
            self.parent.adService.trackAdClick(adUnitId: bannerView.adUnitID ?? "")
        }
    }
}

// MARK: - Placeholder –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ —Ä–µ–∫–ª–∞–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
struct AdBannerPlaceholder: View {
    @ObservedObject var adService: AdService
    @Environment(\.themeManager) private var themeManager
    
    var body: some View {
        Rectangle()
            .fill(themeManager.cardBackground)
            .overlay(
                VStack(spacing: 8) {
                    Image(systemName: "megaphone.fill")
                        .font(.title2)
                        .foregroundColor(themeManager.amberAccent)
                    
                    Text("–†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä")
                        .font(.caption)
                        .foregroundColor(themeManager.textSecondary)
                    
                    Text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∫–ª–∞–º–∞ Google AdMob")
                        .font(.caption2)
                        .foregroundColor(themeManager.textSecondary.opacity(0.7))
                }
            )
            .frame(height: 50)
    }
}

// MARK: - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∫–ª–∞–º—ã
struct AdBannerContainerView: View {
    @StateObject private var adService = AdService.shared
    @EnvironmentObject private var settingsService: SettingsService
    @EnvironmentObject private var storeService: StoreService
    @Environment(\.themeManager) private var themeManager
    @State private var showingPaywall = false
    
    var body: some View {
        if !storeService.isPremium {
            VStack(spacing: 0) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–ª–∞–º—ã
                HStack {
                    Image(systemName: "megaphone.fill")
                        .foregroundColor(themeManager.amberAccent)
                        .font(.caption)
                    
                    Text("–†–µ–∫–ª–∞–º–∞")
                        .font(.caption)
                        .foregroundColor(themeManager.textSecondary)
                    
                    Spacer()
                    
                    Button("–£–±—Ä–∞—Ç—å") {
                        showingPaywall = true
                    }
                    .font(.caption)
                    .foregroundColor(themeManager.amberAccent)
                }
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(themeManager.cardBackground)
                
                // –ë–∞–Ω–Ω–µ—Ä —Ä–µ–∫–ª–∞–º—ã
                ZStack {
                    // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º AdBannerRepresentable –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã
                    AdBannerRepresentable(adService: adService)
                        .frame(height: 50)
                        .opacity(adService.isBannerLoaded ? 1.0 : 0.0)
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–æ–π
                    if !adService.isBannerLoaded && !adService.bannerLoadAttempted {
                        Rectangle()
                            .fill(themeManager.cardBackground)
                            .overlay(
                                HStack {
                                    ProgressView()
                                        .scaleEffect(0.8)
                                    Text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º—ã...")
                                        .font(.caption)
                                        .foregroundColor(themeManager.textSecondary)
                                }
                            )
                            .frame(height: 50)
                    }
                }
            }
            .background(themeManager.cardBackground)
            .cornerRadius(ConvertikCornerRadius.sm)
            .shadow(color: Color.black.opacity(0.1), radius: 2, x: 0, y: 1)
            .accessibilityHidden(true) // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç accessibility
            .sheet(isPresented: $showingPaywall) {
                PaywallView()
            }
            .onAppear {
                print("üì± AdBannerContainerView: isPremium = \(storeService.isPremium)")
                print("üì± AdBannerContainerView: Banner should be visible")
                print("üì± AdBannerContainerView: adService.isBannerLoaded = \(adService.isBannerLoaded)")
            }
        } else {
            EmptyView()
                .onAppear {
                    print("üì± AdBannerContainerView: isPremium = \(storeService.isPremium)")
                    print("üì± AdBannerContainerView: Banner hidden (premium user)")
                }
        }
    }
}

#Preview {
    AdBannerContainerView()
        .environmentObject(SettingsService.shared)
        .environmentObject(ThemeService.shared)
} 