import SwiftUI
import GoogleMobileAds

@main
struct ConvertikApp: App {
    @StateObject private var themeService = ThemeService.shared
    @StateObject private var settingsService = SettingsService.shared
    @StateObject private var ratesRepository = RatesRepository.shared
    @StateObject private var adService = AdService.shared
    @StateObject private var storeService = StoreService.shared
    @StateObject private var analyticsService = AnalyticsService.shared

    init() {
        #if DEBUG
        print("üîß ConvertikApp: Running in DEBUG mode")
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è AdMob
        MobileAds.shared.requestConfiguration.testDeviceIdentifiers = [
            "2077ef9a63d2b398840261c8221a0c9b", // –°–∏–º—É–ª—è—Ç–æ—Ä iOS
            "00000000-0000-0000-0000-000000000000" // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID
        ]
        #else
        print("üöÄ ConvertikApp: Running in RELEASE mode")
        #endif
        
        MobileAds.shared.start { status in
            #if DEBUG
            print("üîß Google Mobile Ads SDK initialization status: \(status)")
            print("üîß AdMob App ID: \(AdConfig.appID)")
            print("üîß Banner Ad Unit ID: \(AdConfig.Banner.mainBottom)")
            print("üîß Interstitial Ad Unit ID: \(AdConfig.Interstitial.main)")
            #else
            print("üöÄ Google Mobile Ads SDK initialization status: \(status)")
            print("üöÄ AdMob App ID: \(AdConfig.appID)")
            print("üöÄ Banner Ad Unit ID: \(AdConfig.Banner.mainBottom)")
            print("üöÄ Interstitial Ad Unit ID: \(AdConfig.Interstitial.main)")
            #endif
        }
    }

    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(themeService)
                .environmentObject(settingsService)
                .environmentObject(ratesRepository)
                .environmentObject(adService)
                .environmentObject(storeService)
                .environmentObject(analyticsService)
                .environment(\.themeManager, ThemeManager(themeService: themeService))
                .preferredColorScheme(themeService.isDarkMode ? .dark : .light)
                .onAppear {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏—Ö–æ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    Task.detached {
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
                        try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
                        await storeService.checkSubscriptionSilently()
                    }
                }
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
                    Task {
                        await analyticsService.sendQueuedEvents()
                    }
                }
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.willTerminateNotification)) { _ in
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    Task {
                        await analyticsService.sendQueuedEvents()
                    }
                }
        }
    }
}
